@page "/counter"
@using GateKeeper.AI.UI.Services
@using Microsoft.SemanticKernel
@using Microsoft.SemanticKernel.Agents.Magentic
@using Microsoft.SemanticKernel.Agents.Orchestration
@using Microsoft.SemanticKernel.Agents.Runtime.InProcess
@using Microsoft.SemanticKernel.ChatCompletion
@using Microsoft.SemanticKernel.Connectors.AzureOpenAI
@inject IConfiguration Configuration

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @currentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount" disabled="@_isRunning">
    @(_isRunning ? "Running..." : "Click me")
</button>

@if (!string.IsNullOrWhiteSpace(_answer))
{
    <h3>Orchestration Result</h3>
    <pre>@_answer</pre>
}
@if (_messages.Count > 0)
{
    <h4>Conversation Trace</h4>
    <ul>
        @foreach (var m in _messages)
        {
            <li><strong>@m.role:</strong> @m.content</li>
        }
    </ul>
}
@if (!string.IsNullOrEmpty(_error))
{
    <div class="alert alert-danger">@_error</div>
}

@code {
    private int currentCount = 0;
    private string? _answer;
    private string? _error;
    private bool _isRunning;
    private readonly List<(string role, string content)> _messages = new();

    // private void IncrementCount()
    // {
    //     currentCount++;
    //     Task.Run(async () => { await StartMagicAsync(); });
    // }

    private async Task IncrementCount()
    {
        currentCount++;
        await StartMagicAsync();
    }

    private async Task StartMagicAsync()
    {
        _error = null;
        _answer = null;
        _messages.Clear();
        _isRunning = true;

        await InvokeAsync(StateHasChanged);

        // Load configuration (ensure you have these keys in appsettings or user secrets)
        var endpoint = Configuration["AzureOpenAISettings:Endpoint"];
        var deployment = Configuration["AzureOpenAISettings:ChatModelDeployment"];
        var apiKey = Configuration["AzureOpenAISettings:ApiKey"];

        if (string.IsNullOrWhiteSpace(endpoint) ||
            string.IsNullOrWhiteSpace(deployment) ||
            string.IsNullOrWhiteSpace(apiKey))
        {
            _error = "Azure OpenAI settings missing. Configure AzureOpenAISettings:Endpoint, ChatModelDeployment, ApiKey.";
            _isRunning = false;
            return;
        }

        try
        {
            var builder = Kernel.CreateBuilder();
            builder.AddAzureOpenAIChatCompletion(
                deploymentName: deployment,
                endpoint: endpoint,
                apiKey: apiKey);

            var kernel = builder.Build();

            // Manager with basic execution settings
            var manager = new StandardMagenticManager(
                kernel.GetRequiredService<IChatCompletionService>(),
                new AzureOpenAIPromptExecutionSettings
                {
                    // You can tune temperature/top_p/etc. if needed
                })
            {
                MaximumInvocationCount = 8, // allow a few more turns
                // Instructions =
                //     "You are the orchestration manager. Collaborate with domain experts to answer the user question clearly. " +
                //     "Stop when a concise, correct final answer is produced."
            };

            var physicsAgent = AgentSetup.CreatePhysicsAgent(kernel);
            var chemistryAgent = AgentSetup.CreateChemistryAgent(kernel);

            //var orchestration = new MagenticOrchestration(manager, physicsAgent, chemistryAgent)
            var orchestration = new MagenticOrchestration(manager, physicsAgent)
            {
                ResponseCallback = async (response) =>
                {
                    // Simple trace capturing
                    _messages.Add((response.AuthorName ?? "", response.Content ?? ""));
                    await InvokeAsync(StateHasChanged);
                }
            };

            var runtime = new InProcessRuntime();
            await runtime.StartAsync();

            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(120)); // overarching guard
            var prompt = "What is Kinetic Energy?";
            //var prompt = "What is CO2?";
            //var orchestrationResult = await orchestration.InvokeAsync(prompt, runtime, cts.Token);
            var orchestrationResult = await orchestration.InvokeAsync(prompt, runtime);

            // Allow up to 90s for final value (adjust as needed)
            //var value = await orchestrationResult.GetValueAsync(TimeSpan.FromSeconds(90), cts.Token);
            var value = await orchestrationResult.GetValueAsync();
            _answer = value;

            // Optional: ensure everything flushed
            await runtime.RunUntilIdleAsync();
        }
        catch (TimeoutException tex)
        {
            _error = $"Timed out waiting for orchestration result: {tex.Message}. Increase timeout or reduce complexity.";
        }
        catch (OperationCanceledException)
        {
            _error = "Operation canceled (timeout or external cancellation).";
        }
        catch (Exception ex)
        {
            _error = $"Unexpected error: {ex.Message}";
        }
        finally
        {
            _isRunning = false;
            await InvokeAsync(StateHasChanged);
        }
    }
}
